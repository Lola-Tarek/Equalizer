# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwin.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import images
import PyQt5.QtWidgets 
import PyQt5.QtGui 
import pyqtgraph as pg
from pyqtgraph import PlotWidget
import pyqtgraph.exporters
import sys
import numpy as np
import pandas as pd
import mne
import soundfile as sf
from spectrogram import Ui_OtherWindow
from reportlab.platypus import SimpleDocTemplate
from reportlab.lib.pagesizes import letter

from reportlab.platypus import Table
from reportlab.platypus import Image
from reportlab.platypus import TableStyle
from reportlab.lib import colors
import matplotlib.pyplot as plt

#signal class
class Signal(PlotWidget):

    def __init__ (self,file_path,data,sample_rate):
        self.file_path=file_path
        self.data=data
        self.sample_rate=sample_rate
        self.fft=None
        self.frequencies=None
        self.magnitude_spectrum=None
        self.phase_spectrum=None
        self.modified_data=None
        #initial plot range
        self.x_range=[0,2000]
        
        
    #pg configurations
    pg.setConfigOptions(background='w')
    #anti aliasing to improve the appearance of a small image that's being scaled up
    pg.setConfigOptions(antialias=True)
        
    #for plotting after reading signal
    def plot_signal(self,data):
        self.win=pg.GraphicsWindow()
        self.win.setFocus()   
        self.win.resize(950, 456)
        self.waveform = self.win.addPlot(row=1, col=1)
        x= np.arange(0,  len(data) , 1)
        self.waveform.showGrid( x = True, y = True)
        self.waveform.enableAutoRange( x = False, y = True)
        p = self.waveform.plot(pen='b', width=0.1)
        p.setData(x, data)
        #self.waveform.setYRange(min(self.data)-1.5, max(self.data)+1.5, padding=0)
        self.waveform.setXRange(self.x_range[0], self.x_range[1],padding=0.005)
        
        #to send signal when clicked
        self.waveform.scene().sigMouseClicked.connect(lambda : ui.detect_click(self.file_path))
        self.win.closeEvent=self.closeEvent

    #plotting modified signal 
    def plot_inverse(self,data):
        self.win2=pg.GraphicsWindow()
        self.win2.setFocus()   
        self.win2.resize(950, 456)
        self.waveform2 = self.win2.addPlot(row=1, col=1)
        x= np.arange(0,  len(data) , 1)
        self.waveform2.showGrid( x = True, y = True)
        self.waveform2.enableAutoRange( x = False, y = True)
        p = self.waveform2.plot(pen='b', width=0.1)
        p.setData(x, data)
        #self.waveform.setYRange(min(self.data)-1.5, max(self.data)+1.5, padding=0)
        self.waveform2.setXRange(self.x_range[0], self.x_range[1],padding=0.005)
        
        #to send signal when clicked
        self.waveform2.scene().sigMouseClicked.connect(lambda : ui.detect_click(self.file_path))
        self.win2.closeEvent=self.closeEvent
        
        

    #fft for signal 
    def signal_fft(self):
        self.fft= np.fft.rfft(self.data)
        self.magnitude_spectrum=np.abs(self.fft) #for calculating magnitude spectrum
        self.phase_spectrum=np.angle(self.fft)
        self.frequencies= np.fft.rfftfreq(len(self.data), d=1 / self.sample_rate)

    
    def generate_band(self):
        self.b1=[]
        self.b2=[]
        self.b3=[]
        self.b4=[]
        self.b5=[]
        self.b6=[]
        self.b7=[]
        self.b8=[]
        self.b9=[]
        self.b10=[]
        freqs=np.sort(self.frequencies)
        for freq in freqs:
            if freqs[0] <= freq < (freqs[-1]/10):
                self.b1.append(freq)
            if (freqs[-1]/10) <= freq < (2*(freqs[-1]/10)):
                self.b2.append(freq)
            if (2*(freqs[-1]/10)) <= freq < (3*(freqs[-1]/10)):
                self.b3.append(freq)
            if (3*(freqs[-1]/10)) <= freq < (4*(freqs[-1]/10)):
                self.b4.append(freq)
            if (4*(freqs[-1]/10)) <= freq < (5*(freqs[-1]/10)):
                self.b5.append(freq)
            if (5*(freqs[-1]/10)) <= freq < (6*(freqs[-1]/10)):
                self.b6.append(freq)
            if (6*(freqs[-1]/10)) <= freq < (7*(freqs[-1]/10)):
                self.b7.append(freq)
            if (7*(freqs[-1]/10)) <= freq < (8*(freqs[-1]/10)):
                self.b8.append(freq)
            if (8*(freqs[-1]/10)) <= freq < (9*(freqs[-1]/10)):
                self.b9.append(freq)
            if (9*(freqs[-1]/10)) <= freq <= (freqs[-1]):
                self.b10.append(freq)
        #print(self.b1)

  
    # def new_freq(self):
    #     n_freq=[]
    #     for band in new_bands:
    #         n_freq= n_freq + band

    def plot_fft_magnitude(self):
        #plot magnitude spectrum
        #x-Axis
        frequency=self.frequencies 
        plt.plot(frequency,self.magnitude_spectrum)
        plt.xlabel("frequency (HZ)")
        plt.show()

    def plot_fft_phase(self):
        #plot magnitude spectrum
        #x-Axis
        frequency=self.frequencies 
        plt.plot(frequency,self.phase_spectrum)
        plt.xlabel("frequency (HZ)")
        plt.show() 
    
    def inverse_fft(self):
        fft = np.multiply(self.magnitude_spectrum, np.exp(1j*self.phase_spectrum))
        self.modified_data=np.fft.irfft(fft)
        self.plot_inverse(self.modified_data)
     

    def closeEvent(self, event):
        ui.signal_closed(self.file_path)

class Pin():
    def __init__ (self): 
        self.title = ''
        self.SignalPath= [] 
        self.GramPath= [] 
        self.pinElementTable=None

    def getPins(self,path):
        name = path.split("/")[-1]
        self.title = name 
        self.SignalPath = [name+".png"]
        self.GramPath = [name+"s"+".png"]

    def genPinTable(self):
        pinElemTable = None
        pinElemWidth = 500
        pinElemHeight = 1000

        # 1) Build Structure
        
    
        titleTable=Table([[self.title]]
            , pinElemWidth)

        S_picture=Image(self.SignalPath[0])
        S_picture.drawWidth=200
        S_picture.drawHeight = 100
    
        G_picture = Image(self.GramPath[0])
        G_picture.drawWidth = 200
        G_picture.drawHeight = 100
       
        picSignal=Table([
            [S_picture]
            ], 250, 125)
        picGram = Table([ 
            [G_picture]
            ], 250, 125)
        
        PicTable = Table([
            [picSignal, picGram]
        ], [250,250])

        self.pinElemTable = Table([
            [titleTable],
            [PicTable]
            ],pinElemWidth)
        
        # 2) Add Style
        # List available fonts
        '''
        from reportlab.pdfgen import canvas
        for font in canvas.Canvas('abc').getAvailableFonts(): 
            print(font)
        '''                
        titleTableStyle = TableStyle([
            ('ALIGN',(0,0),(-1,-1),'CENTER'),
            ('FONTSIZE', (0,0), (-1,-1), 14),
            ('FONTNAME', (0,0), (-1,-1), 
                'Helvetica-Oblique'
                ), 

            ('TOPPADDING',(0,0),(-1,-1), 0),
            ('BOTTOMPADDING',(0,0),(-1,-1), 0), 
        ])
        titleTable.setStyle(titleTableStyle)

        picTableStyle = TableStyle([
            ('LEFTPADDING',(0,0),(-1,-1), 15),

            ('TOPPADDING',(0,0),(-1,-1), 0),
        ])
        picSignal.setStyle(picTableStyle)
        picGram.setStyle(picTableStyle)
        
        pinElemTableStyle = TableStyle([
            ('BOX',(0,0),(-1,-1),3,colors.pink),

            ('TOPPADDING',(0,0),(-1,-1), 0),
            ('BOTTOMPADDING',(0,0),(-1,-1), 0),
        ])
        self.pinElemTable.setStyle(pinElemTableStyle)
    
        
        
    

class Ui_MainWindow(object):

    signals={} #have signal path and the created signal object
    pins={} # have signal path and creted pin object
    signals_fft={}
    played=0 #playing flag 
    pause=0 #pause flag

    def open_window(self):
        self.spectro_draw()
        self.window=QtWidgets.QMainWindow()
        self.ui= Ui_OtherWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowIcon(QtGui.QIcon("images/appicon.png")) 
        #MainWindow.setWindowFlags(QtCore.Qt.WindowStaysOnBottomHint)
        MainWindow.resize(1860, 396)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(-458, 0, 1294, 490))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        # self.frame.setMinimumSize(QtCore.QSize(0, 650))
        self.frame.setStyleSheet("background-color: rgb(170, 170, 170);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setMinimumSize(QtCore.QSize(750, 0))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.frame_2)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_5 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_5.setGeometry(QtCore.QRect(0, -220, 711, 880))
        self.scrollAreaWidgetContents_5.setObjectName("scrollAreaWidgetContents_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_5)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_9 = QtWidgets.QFrame(self.scrollAreaWidgetContents_5)
        self.frame_9.setMinimumSize(QtCore.QSize(0, 300))
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.frame_9)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.label_7 = QtWidgets.QLabel(self.frame_9)
        self.label_7.setMinimumSize(QtCore.QSize(0, 11))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_18.addWidget(self.label_7)
        self.frame_10 = QtWidgets.QFrame(self.frame_9)
        self.frame_10.setMinimumSize(QtCore.QSize(0, 240))
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.verticalLayout_18.addWidget(self.frame_10)
        self.verticalLayout_4.addWidget(self.frame_9)
        self.frame_5 = QtWidgets.QFrame(self.scrollAreaWidgetContents_5)
        self.frame_5.setMinimumSize(QtCore.QSize(0, 250))
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.label_2 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_19.addWidget(self.label_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.gain1 = QtWidgets.QLabel(self.frame_5)
        self.gain1.setObjectName("gain1")
        self.verticalLayout_8.addWidget(self.gain1, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_1 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_1.setMaximum(5)
        self.eq_Slider_1.setProperty("value", 1)
        self.eq_Slider_1.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_1.setObjectName("eq_Slider_1")
        self.verticalLayout_8.addWidget(self.eq_Slider_1, 0, QtCore.Qt.AlignHCenter)
        self.freq_range1 = QtWidgets.QLabel(self.frame_5)
        self.freq_range1.setObjectName("freq_range1")
        self.verticalLayout_8.addWidget(self.freq_range1, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_8)
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.gain2 = QtWidgets.QLabel(self.frame_5)
        self.gain2.setObjectName("gain2")
        self.verticalLayout_12.addWidget(self.gain2, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_2 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_2.setMaximum(5)
        self.eq_Slider_2.setProperty("value", 1)
        self.eq_Slider_2.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_2.setObjectName("eq_Slider_2")
        self.verticalLayout_12.addWidget(self.eq_Slider_2, 0, QtCore.Qt.AlignHCenter)
        self.freq_range2 = QtWidgets.QLabel(self.frame_5)
        self.freq_range2.setObjectName("freq_range2")
        self.verticalLayout_12.addWidget(self.freq_range2, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_12)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.gain3 = QtWidgets.QLabel(self.frame_5)
        self.gain3.setObjectName("gain3")
        self.verticalLayout_10.addWidget(self.gain3, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_3 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_3.setMaximum(5)
        self.eq_Slider_3.setProperty("value", 1)
        self.eq_Slider_3.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_3.setObjectName("eq_Slider_3")
        self.verticalLayout_10.addWidget(self.eq_Slider_3, 0, QtCore.Qt.AlignHCenter)
        self.freq_range3 = QtWidgets.QLabel(self.frame_5)
        self.freq_range3.setObjectName("freq_range3")
        self.verticalLayout_10.addWidget(self.freq_range3, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_10)
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.gain4 = QtWidgets.QLabel(self.frame_5)
        self.gain4.setObjectName("gain4")
        self.verticalLayout_13.addWidget(self.gain4, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_4 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_4.setMaximum(5)
        self.eq_Slider_4.setProperty("value", 1)
        self.eq_Slider_4.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_4.setObjectName("eq_Slider_4")
        self.verticalLayout_13.addWidget(self.eq_Slider_4, 0, QtCore.Qt.AlignHCenter)
        self.freq_range4 = QtWidgets.QLabel(self.frame_5)
        self.freq_range4.setObjectName("freq_range4")
        self.verticalLayout_13.addWidget(self.freq_range4, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_13)
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.gain5 = QtWidgets.QLabel(self.frame_5)
        self.gain5.setObjectName("gain5")
        self.verticalLayout_15.addWidget(self.gain5, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_5 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_5.setMaximum(5)
        self.eq_Slider_5.setProperty("value", 1)
        self.eq_Slider_5.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_5.setObjectName("eq_Slider_5")
        self.verticalLayout_15.addWidget(self.eq_Slider_5, 0, QtCore.Qt.AlignHCenter)
        self.freq_range5 = QtWidgets.QLabel(self.frame_5)
        self.freq_range5.setObjectName("freq_range5")
        self.verticalLayout_15.addWidget(self.freq_range5, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_15)
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.gain6 = QtWidgets.QLabel(self.frame_5)
        self.gain6.setObjectName("gain6")
        self.verticalLayout_16.addWidget(self.gain6, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_6 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_6.setMaximum(5)
        self.eq_Slider_6.setProperty("value", 1)
        self.eq_Slider_6.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_6.setObjectName("eq_Slider_6")
        self.verticalLayout_16.addWidget(self.eq_Slider_6, 0, QtCore.Qt.AlignHCenter)
        self.freq_range6 = QtWidgets.QLabel(self.frame_5)
        self.freq_range6.setObjectName("freq_range6")
        self.verticalLayout_16.addWidget(self.freq_range6, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_16)
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.gain7 = QtWidgets.QLabel(self.frame_5)
        self.gain7.setObjectName("gain7")
        self.verticalLayout_14.addWidget(self.gain7, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_7 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_7.setMaximum(5)
        self.eq_Slider_7.setProperty("value", 1)
        self.eq_Slider_7.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_7.setObjectName("eq_Slider_7")
        self.verticalLayout_14.addWidget(self.eq_Slider_7, 0, QtCore.Qt.AlignHCenter)
        self.freq_range7 = QtWidgets.QLabel(self.frame_5)
        self.freq_range7.setObjectName("freq_range7")
        self.verticalLayout_14.addWidget(self.freq_range7, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_14)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.gain8 = QtWidgets.QLabel(self.frame_5)
        self.gain8.setObjectName("gain8")
        self.verticalLayout_11.addWidget(self.gain8, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_8 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_8.setMaximum(5)
        self.eq_Slider_8.setProperty("value", 1)
        self.eq_Slider_8.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_8.setObjectName("eq_Slider_8")
        self.verticalLayout_11.addWidget(self.eq_Slider_8, 0, QtCore.Qt.AlignHCenter)
        self.freq_range8 = QtWidgets.QLabel(self.frame_5)
        self.freq_range8.setObjectName("freq_range8")
        self.verticalLayout_11.addWidget(self.freq_range8, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_11)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.gain9 = QtWidgets.QLabel(self.frame_5)
        self.gain9.setObjectName("gain9")
        self.verticalLayout_9.addWidget(self.gain9, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_9 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_9.setMaximum(5)
        self.eq_Slider_9.setProperty("value", 1)
        self.eq_Slider_9.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_9.setObjectName("eq_Slider_9")
        self.verticalLayout_9.addWidget(self.eq_Slider_9, 0, QtCore.Qt.AlignHCenter)
        self.freq_range9 = QtWidgets.QLabel(self.frame_5)
        self.freq_range9.setObjectName("freq_range9")
        self.verticalLayout_9.addWidget(self.freq_range9, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_9)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.gain10 = QtWidgets.QLabel(self.frame_5)
        self.gain10.setObjectName("gain10")
        self.verticalLayout_5.addWidget(self.gain10, 0, QtCore.Qt.AlignHCenter)
        self.eq_Slider_10 = QtWidgets.QSlider(self.frame_5)
        self.eq_Slider_10.setMaximum(5)
        self.eq_Slider_10.setProperty("value", 1)
        self.eq_Slider_10.setOrientation(QtCore.Qt.Vertical)
        self.eq_Slider_10.setObjectName("eq_Slider_10")
        self.verticalLayout_5.addWidget(self.eq_Slider_10, 0, QtCore.Qt.AlignHCenter)
        self.freq_range10 = QtWidgets.QLabel(self.frame_5)
        self.freq_range10.setObjectName("freq_range10")
        self.verticalLayout_5.addWidget(self.freq_range10, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.verticalLayout_19.addLayout(self.horizontalLayout_2)
        self.verticalLayout_4.addWidget(self.frame_5)
        self.frame_6 = QtWidgets.QFrame(self.scrollAreaWidgetContents_5)
        self.frame_6.setMinimumSize(QtCore.QSize(0, 300))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_4 = QtWidgets.QLabel(self.frame_6)
        self.label_4.setMinimumSize(QtCore.QSize(0, 11))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_17.addWidget(self.label_4)
        self.frame_7 = QtWidgets.QFrame(self.frame_6)
        self.frame_7.setMinimumSize(QtCore.QSize(0, 240))
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.verticalLayout_17.addWidget(self.frame_7)
        self.verticalLayout_4.addWidget(self.frame_6)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_5)
        self.verticalLayout_3.addWidget(self.scrollArea_2)
        self.horizontalLayout.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setMinimumSize(QtCore.QSize(500, 0))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.scrollArea_3 = QtWidgets.QScrollArea(self.frame_3)
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_6 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_6.setGeometry(QtCore.QRect(0, 0, 478, 430))
        self.scrollAreaWidgetContents_6.setObjectName("scrollAreaWidgetContents_6")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_6)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.label_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents_6)
        self.label_3.setMinimumSize(QtCore.QSize(0, 10))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_22.addWidget(self.label_3)
        self.widget = QtWidgets.QWidget(self.scrollAreaWidgetContents_6)
        self.widget.setMinimumSize(QtCore.QSize(0, 250))
        self.widget.setObjectName("widget")
        self.verticalLayout_22.addWidget(self.widget)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.checkBox_1 = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_6)
        self.checkBox_1.setObjectName("checkBox_1")
        self.verticalLayout_21.addWidget(self.checkBox_1)
        self.checkBox_2 = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_6)
        self.checkBox_2.setObjectName("checkBox_2")
        self.verticalLayout_21.addWidget(self.checkBox_2)
        self.checkBox_3 = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_6)
        self.checkBox_3.setObjectName("checkBox_3")
        self.verticalLayout_21.addWidget(self.checkBox_3)
        self.checkBox_4 = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_6)
        self.checkBox_4.setObjectName("checkBox_4")
        self.verticalLayout_21.addWidget(self.checkBox_4)
        self.checkBox_5 = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_6)
        self.checkBox_5.setObjectName("checkBox_5")
        self.verticalLayout_21.addWidget(self.checkBox_5)
        self.horizontalLayout_4.addLayout(self.verticalLayout_21)
        self.verticalLayout_24 = QtWidgets.QVBoxLayout()
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.specSlider1 = QtWidgets.QSlider(self.scrollAreaWidgetContents_6)
        self.specSlider1.setOrientation(QtCore.Qt.Vertical)
        self.specSlider1.setObjectName("specSlider1")
        self.verticalLayout_24.addWidget(self.specSlider1, 0, QtCore.Qt.AlignHCenter)
        self.specLabel1 = QtWidgets.QLabel(self.scrollAreaWidgetContents_6)
        self.specLabel1.setObjectName("specLabel1")
        self.verticalLayout_24.addWidget(self.specLabel1, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_4.addLayout(self.verticalLayout_24)
        self.verticalLayout_25 = QtWidgets.QVBoxLayout()
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.specSlider2 = QtWidgets.QSlider(self.scrollAreaWidgetContents_6)
        self.specSlider2.setOrientation(QtCore.Qt.Vertical)
        self.specSlider2.setObjectName("specSlider2")
        self.verticalLayout_25.addWidget(self.specSlider2, 0, QtCore.Qt.AlignHCenter)
        self.specLabel2 = QtWidgets.QLabel(self.scrollAreaWidgetContents_6)
        self.specLabel2.setObjectName("specLabel2")
        self.verticalLayout_25.addWidget(self.specLabel2, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_4.addLayout(self.verticalLayout_25)
        self.verticalLayout_22.addLayout(self.horizontalLayout_4)
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_6)
        self.verticalLayout_23.addWidget(self.scrollArea_3)
        self.horizontalLayout.addWidget(self.frame_3)


        self.verticalLayout_2.addWidget(self.frame)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 734, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuASCII_CSV_files = QtWidgets.QMenu(self.menuFile)
        self.menuASCII_CSV_files.setObjectName("menuASCII_CSV_files")
        self.menuData_acquisition = QtWidgets.QMenu(self.menubar)
        self.menuData_acquisition.setObjectName("menuData_acquisition")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuPlay_navigate = QtWidgets.QMenu(self.menubar)
        self.menuPlay_navigate.setObjectName("menuPlay_navigate")
        self.menu3D_tools = QtWidgets.QMenu(self.menubar)
        self.menu3D_tools.setObjectName("menu3D_tools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionOpen_signal = QtWidgets.QAction(MainWindow)
        self.actionOpen_signal.setEnabled(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icon1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen_signal.setIcon(icon)
        self.actionOpen_signal.setShortcutContext(QtCore.Qt.WindowShortcut)
        self.actionOpen_signal.setObjectName("actionOpen_signal")
        self.actionRaw_binary_files = QtWidgets.QAction(MainWindow)
        self.actionRaw_binary_files.setObjectName("actionRaw_binary_files")
        self.actionOpen_data_log_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_data_log_file.setObjectName("actionOpen_data_log_file")
        self.actionSignal_from_clipboard_data_ASCII_CSV = QtWidgets.QAction(MainWindow)
        self.actionSignal_from_clipboard_data_ASCII_CSV.setObjectName("actionSignal_from_clipboard_data_ASCII_CSV")
        self.actionRecent_signals = QtWidgets.QAction(MainWindow)
        self.actionRecent_signals.setObjectName("actionRecent_signals")
        self.actionRecent_workspaces = QtWidgets.QAction(MainWindow)
        self.actionRecent_workspaces.setObjectName("actionRecent_workspaces")
        self.actionReplace_signal_with = QtWidgets.QAction(MainWindow)
        self.actionReplace_signal_with.setObjectName("actionReplace_signal_with")
        self.actionSave_signal_as = QtWidgets.QAction(MainWindow)
        self.actionSave_signal_as.setObjectName("actionSave_signal_as")
        self.actionSave_visible_signal_part_as = QtWidgets.QAction(MainWindow)
        self.actionSave_visible_signal_part_as.setObjectName("actionSave_visible_signal_part_as")
        self.Export_pdf = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/pdf.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Export_pdf.setIcon(icon1)
        self.Export_pdf.setObjectName("Export_pdf")
        self.actionSave_Workspace = QtWidgets.QAction(MainWindow)
        self.actionSave_Workspace.setObjectName("actionSave_Workspace")
        self.actionLoad_Workspace = QtWidgets.QAction(MainWindow)
        self.actionLoad_Workspace.setObjectName("actionLoad_Workspace")
        self.actionSave_window_as_bitmap = QtWidgets.QAction(MainWindow)
        self.actionSave_window_as_bitmap.setObjectName("actionSave_window_as_bitmap")
        self.actionSave_window_as_custom_tool = QtWidgets.QAction(MainWindow)
        self.actionSave_window_as_custom_tool.setObjectName("actionSave_window_as_custom_tool")
        self.actionUse_custom_tool = QtWidgets.QAction(MainWindow)
        self.actionUse_custom_tool.setObjectName("actionUse_custom_tool")
        self.actionApplication_settings = QtWidgets.QAction(MainWindow)
        self.actionApplication_settings.setObjectName("actionApplication_settings")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionImport_signal_from_CSV_decimal_dot = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icon2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionImport_signal_from_CSV_decimal_dot.setIcon(icon2)
        self.actionImport_signal_from_CSV_decimal_dot.setObjectName("actionImport_signal_from_CSV_decimal_dot")
        self.actionImport_signal_from_CSV_decimal_comma = QtWidgets.QAction(MainWindow)
        self.actionImport_signal_from_CSV_decimal_comma.setObjectName("actionImport_signal_from_CSV_decimal_comma")
        self.action_Signal_beginning = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/signalbegin.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Signal_beginning.setIcon(icon3)
        self.action_Signal_beginning.setObjectName("action_Signal_beginning")
        self.actionSignal_End = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/signalend.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSignal_End.setIcon(icon4)
        self.actionSignal_End.setObjectName("actionSignal_End")
        self.actionGo_to_sample = QtWidgets.QAction(MainWindow)
        self.actionGo_to_sample.setObjectName("actionGo_to_sample")
        self.actionPlay_signal_no_sound = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPlay_signal_no_sound.setIcon(icon5)
        self.actionPlay_signal_no_sound.setObjectName("actionPlay_signal_no_sound")
        self.actionPlay_as_fast_as_possible = QtWidgets.QAction(MainWindow)
        self.actionPlay_as_fast_as_possible.setObjectName("actionPlay_as_fast_as_possible")
        self.actionPlay_signal_with_sound = QtWidgets.QAction(MainWindow)
        self.actionPlay_signal_with_sound.setObjectName("actionPlay_signal_with_sound")
        self.actionPlay_visible_segment_only_with_sound = QtWidgets.QAction(MainWindow)
        self.actionPlay_visible_segment_only_with_sound.setObjectName("actionPlay_visible_segment_only_with_sound")
        self.actionStop_playing = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("images/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionStop_playing.setIcon(icon6)
        self.actionStop_playing.setObjectName("actionStop_playing")
        self.actionStep_change = QtWidgets.QAction(MainWindow)
        self.actionStep_change.setObjectName("actionStep_change")
        self.actionRight = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("images/right.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRight.setIcon(icon7)
        self.actionRight.setObjectName("actionRight")
        self.actionAdjust_volume_automatically = QtWidgets.QAction(MainWindow)
        self.actionAdjust_volume_automatically.setObjectName("actionAdjust_volume_automatically")
        self.actionPlay_automatically_if_signal_changes = QtWidgets.QAction(MainWindow)
        self.actionPlay_automatically_if_signal_changes.setObjectName("actionPlay_automatically_if_signal_changes")
        self.actionTime_FFT = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("images/timeffticon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionTime_FFT.setIcon(icon8)
        self.actionTime_FFT.setObjectName("actionTime_FFT")
        self.actionSpectrogram = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("images/specicon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSpectrogram.setIcon(icon9)
        self.actionSpectrogram.setObjectName("actionSpectrogram")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionCut = QtWidgets.QAction(MainWindow)
        self.actionCut.setObjectName("actionCut")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionZoom_In = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("images/zoomin.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoom_In.setIcon(icon10)
        self.actionZoom_In.setObjectName("actionZoom_In")
        self.actionZoom_out = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("images/zoomout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoom_out.setIcon(icon11)
        self.actionZoom_out.setObjectName("actionZoom_out")
        self.actionLeft = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("images/left.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLeft.setIcon(icon12)
        self.actionLeft.setObjectName("actionLeft")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("images/playasfast.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPlay_as_fast_as_possible.setIcon(icon13)
        self.menuASCII_CSV_files.addAction(self.actionImport_signal_from_CSV_decimal_dot)
        self.menuASCII_CSV_files.addAction(self.actionImport_signal_from_CSV_decimal_comma)
        self.menuFile.addAction(self.actionOpen_signal)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuASCII_CSV_files.menuAction())
        self.menuFile.addAction(self.actionRaw_binary_files)
        self.menuFile.addAction(self.actionOpen_data_log_file)
        self.menuFile.addAction(self.actionSignal_from_clipboard_data_ASCII_CSV)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionRecent_signals)
        self.menuFile.addAction(self.actionRecent_workspaces)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionReplace_signal_with)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_signal_as)
        self.menuFile.addAction(self.actionSave_visible_signal_part_as)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.Export_pdf)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_Workspace)
        self.menuFile.addAction(self.actionLoad_Workspace)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_window_as_bitmap)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_window_as_custom_tool)
        self.menuFile.addAction(self.actionUse_custom_tool)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionApplication_settings)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionZoom_In)
        self.menuEdit.addAction(self.actionZoom_out)
        # self.menuEdit.addAction(self.actionLeft)
        self.menuPlay_navigate.addAction(self.action_Signal_beginning)
        self.menuPlay_navigate.addAction(self.actionSignal_End)
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionGo_to_sample)
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionPlay_signal_no_sound)
        self.menuPlay_navigate.addAction(self.actionPlay_as_fast_as_possible)
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionPlay_signal_with_sound)
        self.menuPlay_navigate.addAction(self.actionPlay_visible_segment_only_with_sound)
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionStop_playing)
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionStep_change)
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionLeft) 
        self.menuPlay_navigate.addAction(self.actionRight) 
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionAdjust_volume_automatically)
        self.menuPlay_navigate.addSeparator()
        self.menuPlay_navigate.addAction(self.actionPlay_automatically_if_signal_changes)
        self.menu3D_tools.addAction(self.actionTime_FFT)
        self.menu3D_tools.addAction(self.actionSpectrogram)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuData_acquisition.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuPlay_navigate.menuAction())
        self.menubar.addAction(self.menu3D_tools.menuAction())
        self.toolBar.addAction(self.actionOpen_signal)
        self.toolBar.addAction(self.actionImport_signal_from_CSV_decimal_dot)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.Export_pdf)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionZoom_In)
        self.toolBar.addAction(self.actionZoom_out)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionLeft)
        self.toolBar.addAction(self.actionRight)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_Signal_beginning)
        self.toolBar.addAction(self.actionPlay_signal_no_sound)
        self.toolBar.addAction(self.actionSignal_End)
        self.toolBar.addAction(self.actionStop_playing)
        self.toolBar.addAction(self.actionPlay_as_fast_as_possible)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionTime_FFT)
        self.toolBar.addAction(self.actionSpectrogram)



        #Actions 
        self.actionOpen_signal.triggered.connect(self.open_sig)
        self.actionImport_signal_from_CSV_decimal_comma.triggered.connect(self.open_csv)
        #self.actionImport_signal_from_CSV_decimal_dot.triggered.connect(self.open_scv)
        self.actionZoom_In.triggered.connect(self.zoom_in)
        self.actionZoom_out.triggered.connect(self.zoom_out)
        self.actionPlay_signal_no_sound.triggered.connect(lambda: self.play_signal(3))
        self.actionStop_playing.triggered.connect(self.pause_signal)
        self.action_Signal_beginning.triggered.connect(lambda: self.signal_beginning(1))
        self.actionLeft.triggered.connect(lambda: self.signal_beginning(0))##scroll to left
        self.actionRight.triggered.connect(lambda: self.signal_end(0))##scroll to Right

        self.actionSignal_End.triggered.connect(lambda: self.signal_end(1))
        self.actionPlay_as_fast_as_possible.triggered.connect(self.play_fast)
        self.Export_pdf.triggered.connect(self.E_pdf)
        self.actionSpectrogram.triggered.connect(self.open_window)

        self.actionTime_FFT.triggered.connect(self.inverse_fft)

        self.eq_Slider_1.valueChanged.connect(self.slider_step)
        self.eq_Slider_2.valueChanged.connect(self.slider_step)
        self.eq_Slider_3.valueChanged.connect(self.slider_step)
        self.eq_Slider_4.valueChanged.connect(self.slider_step)
        self.eq_Slider_5.valueChanged.connect(self.slider_step)
        self.eq_Slider_6.valueChanged.connect(self.slider_step)
        self.eq_Slider_7.valueChanged.connect(self.slider_step)
        self.eq_Slider_8.valueChanged.connect(self.slider_step)
        self.eq_Slider_9.valueChanged.connect(self.slider_step)
        self.eq_Slider_10.valueChanged.connect(self.slider_step)







        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SIGVIEW"))
        
        self.label_7.setText(_translate("MainWindow", "Before"))
        self.label_2.setText(_translate("MainWindow", "Equalizer"))
        self.gain1.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range1.setText(_translate("MainWindow", "TextLabel"))
        self.gain2.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range2.setText(_translate("MainWindow", "TextLabel"))
        self.gain3.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range3.setText(_translate("MainWindow", "TextLabel"))
        self.gain4.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range4.setText(_translate("MainWindow", "TextLabel"))
        self.gain5.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range5.setText(_translate("MainWindow", "TextLabel"))
        self.gain6.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range6.setText(_translate("MainWindow", "TextLabel"))
        self.gain7.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range7.setText(_translate("MainWindow", "TextLabel"))
        self.gain8.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range8.setText(_translate("MainWindow", "TextLabel"))
        self.gain9.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range9.setText(_translate("MainWindow", "TextLabel"))
        self.gain10.setText(_translate("MainWindow", "TextLabel"))
        self.freq_range10.setText(_translate("MainWindow", "TextLabel"))
        self.label_4.setText(_translate("MainWindow", "After"))
        self.label_3.setText(_translate("MainWindow", "Spectrogram"))
        self.checkBox_1.setText(_translate("MainWindow", "CheckBox"))
        self.checkBox_2.setText(_translate("MainWindow", "CheckBox"))
        self.checkBox_3.setText(_translate("MainWindow", "CheckBox"))
        self.checkBox_4.setText(_translate("MainWindow", "CheckBox"))
        self.checkBox_5.setText(_translate("MainWindow", "CheckBox"))
        self.specLabel1.setText(_translate("MainWindow", "TextLabel"))
        self.specLabel2.setText(_translate("MainWindow", "TextLabel"))

        self.menuFile.setStatusTip(_translate("MainWindow", "Creates a new document"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuASCII_CSV_files.setStatusTip(_translate("MainWindow", "Import new ASCII signal (dot as decimal separator)"))
        self.menuASCII_CSV_files.setTitle(_translate("MainWindow", "ASCII / CSV files"))
        self.menuData_acquisition.setTitle(_translate("MainWindow", "Data acquisition"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuPlay_navigate.setTitle(_translate("MainWindow", "Play && navigate"))
        self.menu3D_tools.setTitle(_translate("MainWindow", "3D tools"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen_signal.setText(_translate("MainWindow", "Open signal..."))
        self.actionOpen_signal.setStatusTip(_translate("MainWindow", "Opens new signal"))
        self.actionOpen_signal.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionRaw_binary_files.setText(_translate("MainWindow", "Raw binary files"))
        self.actionOpen_data_log_file.setText(_translate("MainWindow", "Open data log file..."))
        self.actionSignal_from_clipboard_data_ASCII_CSV.setText(_translate("MainWindow", "Signal from clipboard data... (ASCII / CSV)"))
        self.actionSignal_from_clipboard_data_ASCII_CSV.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionRecent_signals.setText(_translate("MainWindow", "Recent signals"))
        self.actionRecent_workspaces.setText(_translate("MainWindow", "Recent workspaces"))
        self.actionReplace_signal_with.setText(_translate("MainWindow", "Replace signal with..."))
        self.actionSave_signal_as.setText(_translate("MainWindow", "Save signal as..."))
        self.actionSave_visible_signal_part_as.setText(_translate("MainWindow", "Save visible signal part as..."))
        self.Export_pdf.setText(_translate("MainWindow", "Export report as pdf"))
        self.Export_pdf.setStatusTip(_translate("MainWindow", "Export report for the selected signals as pdf"))
        self.Export_pdf.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actionSave_Workspace.setText(_translate("MainWindow", "Save Workspace..."))
        self.actionLoad_Workspace.setText(_translate("MainWindow", "Load Workspace..."))
        self.actionSave_window_as_bitmap.setText(_translate("MainWindow", "Save window as bitmap..."))
        self.actionSave_window_as_custom_tool.setText(_translate("MainWindow", "Save window as custom tool"))
        self.actionUse_custom_tool.setText(_translate("MainWindow", "Use custom tool"))
        self.actionApplication_settings.setText(_translate("MainWindow", "Application settings..."))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Alt+F4"))
        self.actionImport_signal_from_CSV_decimal_dot.setText(_translate("MainWindow", "Import signal from CSV (decimal dot)..."))
        self.actionImport_signal_from_CSV_decimal_dot.setStatusTip(_translate("MainWindow", "Import new ASCII  signal (dot as decimal separator)"))
        self.actionImport_signal_from_CSV_decimal_comma.setText(_translate("MainWindow", "Import signal from CSV (decimal comma)..."))
        self.actionImport_signal_from_CSV_decimal_comma.setStatusTip(_translate("MainWindow", "Import new ASCII signal (comma as decimal separator)"))
        self.action_Signal_beginning.setText(_translate("MainWindow", "<< Signal beginning"))
        self.action_Signal_beginning.setShortcut(_translate("MainWindow", "Home"))
        self.actionSignal_End.setText(_translate("MainWindow", "Signal End >>"))
        self.actionSignal_End.setShortcut(_translate("MainWindow", "End"))
        self.actionGo_to_sample.setText(_translate("MainWindow", "Go to sample..."))
        self.actionPlay_signal_no_sound.setText(_translate("MainWindow", "Play signal (no sound)"))
        self.actionPlay_signal_no_sound.setShortcut(_translate("MainWindow", "F5"))
        self.actionPlay_as_fast_as_possible.setText(_translate("MainWindow", "Play as fast as possible"))
        self.actionPlay_signal_with_sound.setText(_translate("MainWindow", "Play signal (with sound)"))
        self.actionPlay_visible_segment_only_with_sound.setText(_translate("MainWindow", "Play visible segment only (with sound)"))
        self.actionPlay_signal_with_sound.setShortcut(_translate("MainWindow", "F6"))
        self.actionStop_playing.setText(_translate("MainWindow", "Stop playing"))
        self.actionStop_playing.setStatusTip(_translate("MainWindow", "Stops acquisition"))
        self.actionStop_playing.setShortcut(_translate("MainWindow", "F7"))
        self.actionStep_change.setText(_translate("MainWindow", "Step change..."))
        self.actionStep_change.setStatusTip(_translate("MainWindow", "Change step for moving trough signals"))
        self.actionStep_change.setShortcut(_translate("MainWindow", "Alt+Up, Alt+Down"))
        self.actionRight.setText(_translate("MainWindow", "scroll to right"))
        # self.actionRight.setStatusTip(_translate("MainWindow", "Start playing signal from the beginning each time its end has been reached"))
        self.actionAdjust_volume_automatically.setText(_translate("MainWindow", "Adjust volume automatically"))
        self.actionPlay_automatically_if_signal_changes.setText(_translate("MainWindow", "Play automatically if signal changes"))
        self.actionPlay_automatically_if_signal_changes.setStatusTip(_translate("MainWindow", "Play signal on sound card on every change"))
        self.actionTime_FFT.setText(_translate("MainWindow", "Time FFT..."))
        self.actionTime_FFT.setShortcut(_translate("MainWindow", "Ctrl+T"))
        self.actionSpectrogram.setText(_translate("MainWindow", "Spectrogram..."))
        self.actionSpectrogram.setShortcut(_translate("MainWindow", "Ctrl+G"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionCut.setText(_translate("MainWindow", "Cut"))
        self.actionCut.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionPaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.actionZoom_In.setText(_translate("MainWindow", "Zoom In"))
        self.actionZoom_In.setShortcut(_translate("MainWindow", "Ctrl++"))
        self.actionZoom_In.setStatusTip(_translate("MainWindow", "Zoom selected part"))
        self.actionZoom_out.setText(_translate("MainWindow", "Zoom out"))
        self.actionZoom_out.setShortcut(_translate("MainWindow", "Ctrl+-"))
        self.actionZoom_out.setStatusTip(_translate("MainWindow", "Show previous zoom"))
        self.actionLeft.setText(_translate("MainWindow", "scroll to left"))
        self.actionLeft.setStatusTip(_translate("MainWindow", "scroll left"))
        self.actionRight.setStatusTip(_translate("MainWindow", "scroll right"))
        self.actionLeft.setShortcut(_translate("MainWindow", "Ctrl+2"))
        self.actionRight.setShortcut(_translate("MainWindow", "Ctrl+3"))

    
    #open for signals .wav , .edf
    def open_sig(self):
        if len(self.signals) < 3:
            print("open_sig")
            path = PyQt5.QtWidgets.QFileDialog.getOpenFileName(None, 'Open', None, "WAV (*.wav);; EDF(*.edf);; Txt(*.txt)")[0]

            #load .wav data
            if path:
                if path.endswith('.wav'):
                    data, sample_rate = sf.read(path)
                    #create signa object and plot
                    self.create_signal(path,data,sample_rate)
                
                elif path.endswith('.edf'):
                    data = mne.io.read_raw_edf(path)
                    data = data.get_data()
                    #create signa object and plot
                    self.create_signal(path,100000*data[0])

    #open for signals .csv
    def open_csv(self):
        if len(self.signals) < 3:
            print("open_csv")
            path = PyQt5.QtWidgets.QFileDialog.getOpenFileName(None, 'Open', None, "CSV (*.csv)")[0]
            if path:
                df=pd.read_csv(path,usecols=[0,1])
                data=np.array(df.iloc[:,1])
                #create signa object and plot
                self.create_signal(path,data)
                
                
    #create Signal object and plot signal
    def create_signal(self,path,data,sample_rate=0):
        self.signals[path]=Signal(path,data,sample_rate)
        self.signals[path].plot_signal(data)

        #create fft for signal
        self.signals[path].signal_fft()
        #print(self.signals[path].fft)
        #self.signals[path].plot_fft()
        self.signals[path].generate_band()

       

    def inverse_fft(self):
        self.signals[self.selected_signal].inverse_fft()
       
        
    #emit path of the last clicked on signal  
    def detect_click(self,file_path):
        self.selected_signal=file_path
        #self.signal.emit(file_path)
        #print(file_path)

    # Zoom 
    def zoom_in(self):
        center_x=(self.signals[self.selected_signal].waveform.getAxis("bottom").range[0]+self.signals[self.selected_signal].waveform.getAxis("bottom").range[1])/2
        center_y=0
        self.signals[self.selected_signal].waveform.getViewBox().scaleBy(y=0.9 ,x=0.9,center=(center_x,center_y))
        # self.signals[self.selected_signal].waveform.getViewBox().scaleBy(x=0.1)

    def zoom_out(self,file_path):
        center_x=(self.signals[self.selected_signal].waveform.getAxis("bottom").range[0]+self.signals[self.selected_signal].waveform.getAxis("bottom").range[1])/2
        center_y=0
        self.signals[self.selected_signal].waveform.getViewBox().scaleBy(y=(1/0.9), x=(1/0.9),center=(center_x,center_y))
        # self.signals[self.selected_signal].waveform.getViewBox().scaleBy(x=(1/0.1))

    ##play function and play as fast as possible
    def play_signal(self,step):
        self.pause=0
        self.played=1
        #save signal path 
        sig_path=self.selected_signal
        sig_length = len(self.signals[self.selected_signal].data)
        #print(sig_length)
        starting_x=self.signals[self.selected_signal].waveform.getAxis("bottom").range
        x_end=starting_x[1]
        #check if signal reached the end
        if starting_x [1] < sig_length:
            i=1
            #play signal 
            while x_end < sig_length:
                #break if another signal is selected
                if sig_path != self.selected_signal:
                    break
                #break if pause is pressed
                if self.pause == 1:
                    break
                self.signals[self.selected_signal].waveform.setXRange(starting_x [0] + step*i , starting_x[1] + step*i)
                QtWidgets.QApplication.processEvents()
                #x_end= x_end + step
                x_end = self.signals[self.selected_signal].waveform.getAxis("bottom").range[1]
                i+=1
            #print(x_end)
            #print(i)

    def play_fast(self):
        self.pause_signal()
        self.play_signal(40)
    
    #pause function
    def pause_signal(self):
            self.pause=1
            self.played=0
        

    #to signal beginning
    def signal_beginning(self,mode):
        self.pause_signal()
        #get original xrange
        x_range=self.signals[self.selected_signal].x_range
        if mode==1: #start of the signal
            self.signals[self.selected_signal].waveform.setXRange(x_range[0] , x_range[1], padding=0.005)
        else:
            x_start = self.signals[self.selected_signal].waveform.getAxis("bottom").range[0]
            x_end = self.signals[self.selected_signal].waveform.getAxis("bottom").range[1]
            # print(x_start)
            # print(x_end)
            if (x_start-10 < 0): self.signal_beginning(1)
            else:
                self.signals[self.selected_signal].waveform.setXRange(x_start-10 , x_end-20,  padding=0.005)   
    

    #to signal end
    def signal_end(self,mode):
        self.pause_signal()
        #set xrange to be  
        if mode ==1:
            x_end=len(self.signals[self.selected_signal].data)
            self.signals[self.selected_signal].waveform.setXRange(x_end-2000 , x_end, padding=0.005)
        else:
            x_start = self.signals[self.selected_signal].waveform.getAxis("bottom").range[0]
            x_end = self.signals[self.selected_signal].waveform.getAxis("bottom").range[1]
            # print(x_start)
            # print(x_end)
            if (x_end+10 > len(self.signals[self.selected_signal].data)): self.signal_end(1)
            else: 
                self.signals[self.selected_signal].waveform.setXRange(x_start+20 , x_end+10, padding=0.005)
   

    #delete closed signal
    def signal_closed(self,file_path):
        #print(len(self.signals))
        del self.signals[file_path]
        #print(len(self.signals))
    
        #save signal plots
    def save(self):
        for sig in self.signals:
            #signal im save
            plot_data=self.signals[sig].waveform
            QtGui.QApplication.processEvents()
            exporter = pg.exporters.ImageExporter(plot_data)
            exporter.parameters()['width'] = 500
            name=sig.split("/")[-1]
            exporter.export(name+".png")
            fig = plt.figure()
            plt.subplot(212)
            data=self.signals[sig].data
            plt.specgram(data, Fs=1000)
            plt.xlabel('Time(sec)')
            plt.ylabel('Frequency(Hz)')
            fig.savefig(name+"s"+".png")
            plt.close(fig)
        

            
    def E_pdf(self):
        self.save()
        for i  in self.signals:
            self.pins[i]=Pin()
            self.pins[i].getPins(i)
           # print(self.pins)


        fileName = 'pdfTable.pdf'

        self.pdf = SimpleDocTemplate(fileName,pagesize=letter)
        
        #append table elements
        self.elems = []
        for pin in self.pins:
            self.pins[pin].genPinTable() #generate element for each signal
            self.elems.append(self.pins[pin].pinElemTable)
        self.pdf.build(self.elems)
        print("Report is done")

    def spectro_draw(self):
        fig=plt.figure()
        plt.specgram(self.signals[self.selected_signal].data, Fs=1000)
        plt.xlabel('Time(sec)')
        plt.ylabel('Frequency(Hz)')
        fig.savefig('plot.png')
        #plt.show()
    
    def slider_step(self):
        current_val_1 = self.eq_Slider_1.value()
        current_val_2= self.eq_Slider_2.value()
        current_val_3 = self.eq_Slider_3.value()
        current_val_4 = self.eq_Slider_4.value()
        current_val_5 = self.eq_Slider_5.value()
        current_val_6 = self.eq_Slider_6.value()
        current_val_7= self.eq_Slider_7.value()
        current_val_8 = self.eq_Slider_8.value()
        current_val_9= self.eq_Slider_9.value()
        current_val_10= self.eq_Slider_10.value()

        new_band_1 = [f * current_val_1 for f in self.signals[self.selected_signal].b1]
        new_band_2 = [f * current_val_2 for f in self.signals[self.selected_signal].b2]
        new_band_3 = [f * current_val_3 for f in self.signals[self.selected_signal].b3]
        new_band_4 = [f * current_val_4 for f in self.signals[self.selected_signal].b4]
        new_band_5 = [f * current_val_5 for f in self.signals[self.selected_signal].b5]
        new_band_6 = [f * current_val_6 for f in self.signals[self.selected_signal].b6]
        new_band_7 = [f * current_val_7 for f in self.signals[self.selected_signal].b7]
        new_band_8 = [f * current_val_8 for f in self.signals[self.selected_signal].b8]
        new_band_9 = [f * current_val_9 for f in self.signals[self.selected_signal].b9]
        new_band_10 = [f * current_val_10 for f in self.signals[self.selected_signal].b10]

        new_freq= new_band_1 + new_band_2 + new_band_3 +new_band_4+new_band_5+new_band_6+new_band_7+new_band_8+new_band_9+new_band_10

        #new_freq= new_band + self.signals[self.selected_signal].b2 + self.signals[self.selected_signal].b3 + self.signals[self.selected_signal].b4 +self.signals[self.selected_signal].b5+ self.signals[self.selected_signal].b6 + self.signals[self.selected_signal].b7 + self.signals[self.selected_signal].b8 + self.signals[self.selected_signal].b9 + self.signals[self.selected_signal].b10
        
        #print(new_band)
        #print(new_freq)

    
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.showMaximized()
    MainWindow.show()
    sys.exit(app.exec_())
